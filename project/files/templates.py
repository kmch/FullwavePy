"""
(c) 2019 Kajetan Chrapkiewicz.
Copywright: Ask for permission writing to k.chrapkiewicz17@imperial.ac.uk.

"""
import numpy as np
import matplotlib.pyplot as plt
from autologging import logged, traced

from fullwavepy.generic.parse import kw, del_kw, exten, strip
from fullwavepy.generic.system import bash, exists
from fullwavepy.project.files.generic import AsciiProjFile
from fullwavepy.project.files.datalike.generic import DataFile
from fullwavepy.project.files.datalike.sgy import DataFileSgy
from fullwavepy.ioapi.fw3d import TtrFile


# -------------------------------------------------------------------------------


@traced
@logged
class TemplateFileTtr(DataFile, TtrFile):
  """
  Files 2 & 3, containing Template, provide one SEG-Y trace for each synthetic trace that is to
  be generated by fullwave. These files specify the actual sources and receivers that must be
  modelled, and also provide pre-completed SEG-Y headers for the resulting synthetic data.
  Typically the template files will contain blank traces with SEG-Y headers derived directly from
  the field data that they are seeking to simulate. These files play an analogous role to that
  played previously by the Observed-0000.ttr file.  
  
  If we inherit from DataFileTtr instead, super().__init__ will need a suffix.
  """
  def __init__(self, proj, path, **kwargs):
    """
    
    """  
    self.suffix = 'Observed-0000'
    self.ext = 'ttr' #FIXME move to ttr
    #self.name = proj.name + '-Observed-0000.ttr'
    #self.fname = path + self.name
    super().__init__(proj, path, **kwargs)

  def read(self, **kwargs):
    raise NotImplementedError('convert_ttr2vtr_IMPROVED.f90 could not handle it')


# -------------------------------------------------------------------------------


#@traced
#@logged
#class TtmFile(AsciiProjFile):

# -------------------------------------------------------------------------------


@traced
@logged
class TemplateFileSgy(DataFileSgy):
  """
  Files 2 & 3, containing Template, provide one SEG-Y trace for each synthetic trace that is to
  be generated by fullwave. These files specify the actual sources and receivers that must be
  modelled, and also provide pre-completed SEG-Y headers for the resulting synthetic data.
  Typically the template files will contain blank traces with SEG-Y headers derived directly from
  the field data that they are seeking to simulate. These files play an analogous role to that
  played previously by the Observed-0000.ttr file.  
  """
  def __init__(self, proj, path, **kwargs):
    """
    
    """ 
    from fullwavepy.project.files.index import IndexFile
    suffix = 'Template'
    self.idx = IndexFile(suffix, proj, path, **kwargs)
    self.hed = HedFile(suffix, proj, path, **kwargs) # NOT SURE THIS FILE IS CREATED BY SegyPrep
    super().__init__(suffix, proj, path, **kwargs)


# -------------------------------------------------------------------------------


@traced
@logged
class HedFile(AsciiProjFile):
  """
  ASCII version of the idx SEG-Y metadata 
  index files for QC.
  
  Notes
  -----
  Whether or not it is generated by SegyPrep
  depends on the 'text' parameter in SegyPrep.key.
  
  """
  def __init__(self, suffix, proj, path, **kwargs):
    self.name = proj.name + '-' + suffix + '.hed'
    self.fname = path + self.name
    super().__init__(proj, path, **kwargs)


@traced
@logged
class ObsHedFile(HedFile):
  def __init__(self, proj, path, **kwargs):
    suffix = 'Observed'
    super().__init__(suffix, proj, path, **kwargs)

# -------------------------------------------------------------------------------

